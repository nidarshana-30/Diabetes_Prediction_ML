# -*- coding: utf-8 -*-
"""Project Women cloth reviews prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I_Cn8r5KOeOi5uhA5Dct8u8Sk98fxsGY

**Women Cloth Reviews Prediction with Multi Nomial Na√Øve Bayes**

*Italicized text The multinomial Naive Bayes classifier is suitable for classification with discrete features (e.g., word counts for text classification). The multinomial distribution normally requires integer feature counts. However, in practice, fractional counts such as tf-idf may also work.*

# **IMPORTING LIBRARY**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# **Import Dataset**"""

df = pd.read_csv("https://raw.githubusercontent.com/YBIFoundation/ProjectHub-MachineLearning/main/Women%20Clothing%20E-Commerce%20Review.csv")

"""# **Data visualization**

*Samples of the data is visualized to better understand how it is structured*
"""

df.head()

df.info()

df.shape

"""# Data preprocessing

*Calling isna() method along with the sum() method on dataframe df to find the Review columns with no review text for further process*
"""

df.isna().sum()

df[df['Review']==""] = np.NaN
df['Review'].fillna("No review is given", inplace=True)
df.isna().sum()

df['Review']

df.columns

x = df['Review']
y = df['Rating']
df['Rating'].value_counts()

"""# Train Test Split"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.7, stratify=y, random_state=2529)
x_train.shape, x_test.shape, y_train.shape, y_test.shape

"""# Getting Tokens from Feature Text"""

from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer(lowercase=True, analyzer='word', ngram_range=(2, 3), stop_words='english', max_features=50000)
x_train = cv.fit_transform(x_train)
cv.get_feature_names_out()

x_train.toarray()

x_test = cv.fit_transform(x_test)
cv.get_feature_names_out()

x_test.toarray()

"""# Model training"""

from sklearn.naive_bayes import MultinomialNB

model = MultinomialNB()
model.fit(x_train, y_train)

"""# Model prediction"""

y_pred = model.predict(x_test)
y_pred.shape

y_pred

model.predict_proba(x_test)

"""# Model evaluation"""

from sklearn.metrics import confusion_matrix, classification_report

print(confusion_matrix(y_test, y_pred))

print(classification_report(y_test, y_pred))